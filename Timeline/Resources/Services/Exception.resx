<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AvatarFormatException" xml:space="preserve">
    <value>Avartar is of bad format because {0}.</value>
  </data>
  <data name="AvatarFormatExceptionBadSize" xml:space="preserve">
    <value>image is not a square, aka, width is not equal to height</value>
  </data>
  <data name="AvatarFormatExceptionCantDecode" xml:space="preserve">
    <value>failed to decode image, see inner exception</value>
  </data>
  <data name="AvatarFormatExceptionUnknownError" xml:space="preserve">
    <value>unknown error</value>
  </data>
  <data name="AvatarFormatExceptionUnmatchedFormat" xml:space="preserve">
    <value>image's actual mime type is not the specified one</value>
  </data>
  <data name="BadPasswordException" xml:space="preserve">
    <value>The password is wrong.</value>
  </data>
  <data name="HashedPasswordBadFromatException" xml:space="preserve">
    <value>The hashes password is of bad format. It might not be created by server.</value>
  </data>
  <data name="HashedPasswordBadFromatExceptionNotBase64" xml:space="preserve">
    <value>Not of valid base64 format. See inner exception.</value>
  </data>
  <data name="HashedPasswordBadFromatExceptionNotLength0" xml:space="preserve">
    <value>Decoded hashed password is of length 0.</value>
  </data>
  <data name="HashedPasswordBadFromatExceptionNotOthers" xml:space="preserve">
    <value>See inner exception.</value>
  </data>
  <data name="HashedPasswordBadFromatExceptionNotSaltTooShort" xml:space="preserve">
    <value>Salt length &lt; 128 bits.</value>
  </data>
  <data name="HashedPasswordBadFromatExceptionNotSubkeyTooShort" xml:space="preserve">
    <value>Subkey length &lt; 128 bits.</value>
  </data>
  <data name="HashedPasswordBadFromatExceptionNotUnknownMarker" xml:space="preserve">
    <value>Unknown format marker.</value>
  </data>
  <data name="JwtUserTokenBadFormatException" xml:space="preserve">
    <value>The token didn't pass verification because {0}.</value>
  </data>
  <data name="JwtUserTokenBadFormatExceptionIdBadFormat" xml:space="preserve">
    <value>id claim is not a number</value>
  </data>
  <data name="JwtUserTokenBadFormatExceptionIdMissing" xml:space="preserve">
    <value>id claim does not exist</value>
  </data>
  <data name="JwtUserTokenBadFormatExceptionOthers" xml:space="preserve">
    <value>other error, see inner exception for information</value>
  </data>
  <data name="JwtUserTokenBadFormatExceptionUnknown" xml:space="preserve">
    <value>unknown error</value>
  </data>
  <data name="JwtUserTokenBadFormatExceptionVersionBadFormat" xml:space="preserve">
    <value>version claim is not a number.</value>
  </data>
  <data name="JwtUserTokenBadFormatExceptionVersionMissing" xml:space="preserve">
    <value>version claim does not exist.</value>
  </data>
  <data name="PasswordBadFormatException" xml:space="preserve">
    <value>Password is of bad format.</value>
  </data>
  <data name="TimelineAlreadyExistException" xml:space="preserve">
    <value>The timeline with that name already exists.</value>
  </data>
  <data name="TimelineMemberOperationException" xml:space="preserve">
    <value>An exception happened when add or remove member on timeline.</value>
  </data>
  <data name="TimelineMemberOperationExceptionDetail" xml:space="preserve">
    <value>An exception happened when do operation {0} on the {1} member on timeline.</value>
  </data>
  <data name="TimelineNameBadFormatException" xml:space="preserve">
    <value>Timeline name is of bad format. If this is a personal timeline, it means the username is of bad format and inner exception should be a UsernameBadFormatException.</value>
  </data>
  <data name="TimelineNotExistException" xml:space="preserve">
    <value>Timeline does not exist. If this is a personal timeline, it means the user does not exist and inner exception should be a UserNotExistException.</value>
  </data>
  <data name="TimelinePostNotExistException" xml:space="preserve">
    <value>The timeline post does not exist. You can't do operation on it.</value>
  </data>
  <data name="TimelineUserNotMemberException" xml:space="preserve">
    <value>The use is not a member of the timeline.</value>
  </data>
  <data name="UsernameConfictException" xml:space="preserve">
    <value>The username already exists.</value>
  </data>
  <data name="UserNotExistException" xml:space="preserve">
    <value>The user does not exist.</value>
  </data>
  <data name="UserTokenBadFormatException" xml:space="preserve">
    <value>The token is of bad format, which means it may not be created by the server.</value>
  </data>
  <data name="UserTokenBadVersionException" xml:space="preserve">
    <value>The token is of bad version.</value>
  </data>
  <data name="UserTokenTimeExpireException" xml:space="preserve">
    <value>The token is expired because its expiration time has passed.</value>
  </data>
</root>